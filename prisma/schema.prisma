// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model Organization {
  org_id       String    @id @default(uuid())
  org_name     String
  is_private   Boolean   @default(true)
  org_owner_id String?
  org_owner    User?     @relation(fields: [org_owner_id], references: [user_id])
  org_admin    User[]    @relation("org_admin_user")
  org_user     User[]    @relation("org_joined_user")
  project      Project[]

}

model User {
  user_id        String         @id @default(uuid())
  email          String         @unique
  password       String
  is_premium     Boolean        @default(false)
  first_name     String
  last_name      String
  avatar_img     String         @default("")
  comment        String         @default("")
  own_org        Organization[]
  admin_org      Organization[] @relation("org_admin_user")
  joined_org     Organization[] @relation("org_joined_user")
  settings       Settings?
  assigned_task  Task[]         @relation("task_assigned")
  posted_task    Task[]         @relation("task_author")
  resp_project   Project[]      @relation("project_resp")
  member_project Project[]      @relation("project_member")
  created_at     DateTime       @default(now())
  update_at      DateTime       @updatedAt
}

model Settings {
  user_id         String  @id
  dark_mode       Boolean @default(false)
  tooltip         Boolean @default(true)
  private_mode    Boolean @default(true)
  selected_org_id String  @default("")
  user            User    @relation(fields: [user_id], references: [user_id])
}

model Project {
  project_id    String         @id @default(uuid())
  project_name  String
  org_id        String
  org           Organization   @relation(fields: [org_id], references: [org_id])
  resp          User[]         @relation("project_resp")
  member        User[]         @relation("project_member")
  description   String
  startdate     String
  enddate       String
  task_category TaskCategory[]
  created_at    DateTime       @default(now())
  update_at     DateTime       @updatedAt
}

model Task {
  task_id             String       @id @default(uuid())
  task_name           String
  project_id          String
  task_category_id    Int
  task_category       TaskCategory @relation(fields: [task_category_id], references: [task_category_id])
  assigned_id         String
  assigned            User         @relation(name: "task_assigned", fields: [assigned_id], references: [user_id])
  author_id           String
  author              User         @relation(name: "task_author", fields: [author_id], references: [user_id])
  description         String
  status              String
  estimate_manhour    Int
  actual_manhour      Int
  scheduled_startdate String
  scheduled_enddate   String
  actual_startdate    String
  actual_enddate      String
  created_at          DateTime     @default(now())
  update_at           DateTime     @updatedAt
}

model TaskCategory {
  task_category_id   Int     @id @default(autoincrement())
  task_category_name String
  project_id         String
  project            Project @relation(fields: [project_id], references: [project_id])
  Task               Task[]
}
